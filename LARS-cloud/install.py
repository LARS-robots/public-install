#!/usr/bin/env python3

"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ LARS Cloud

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç:
python3 install.py

–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –°–∫–∞—á–∏–≤–∞–µ—Ç tar-–∞—Ä—Ö–∏–≤ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
2. –ö–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω)
3. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤
4. –°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑—ã —á–µ—Ä–µ–∑ `docker buildx bake`
"""

import os
import sys
import shutil
import tarfile
import subprocess
import urllib.request
from pathlib import Path

REPO_URL = "https://github.com/LARS-robots/public-install/raw/main/LARS-cloud/lars-cloud.tar.gz"
INSTALL_DIR = "LARS-cloud"

def check_command(command):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
    return shutil.which(command) is not None


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç"""
    required_commands = {
        'docker': 'Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        'docker-compose': 'Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        'python3': 'Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }

    for command, error_msg in required_commands.items():
        if not check_command(command):
            print(f"‚ùå {error_msg}")
            sys.exit(1)


def download_file(url, filename):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL"""
    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {filename}...")
        urllib.request.urlretrieve(url, filename)
        print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
        sys.exit(1)


def extract_archive(archive_path, extract_to="."):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç tar.gz –∞—Ä—Ö–∏–≤"""
    try:
        print(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º {archive_path}...")
        with tarfile.open(archive_path, 'r:gz') as tar:
            tar.extractall(path=extract_to)
        print("‚úÖ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        sys.exit(1)


def run_build_script():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    try:
        result = subprocess.run([sys.executable, "scripts/build_and_prepare.py"],
                                check=True, capture_output=True, text=True)
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ —Å–±–æ—Ä–∫–∏:")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        sys.exit(1)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª scripts/build_and_prepare.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LARS Cloud...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    check_requirements()

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
    install_path = Path(INSTALL_DIR)
    if install_path.exists():
        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {INSTALL_DIR}")
        shutil.rmtree(install_path)

    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {INSTALL_DIR}")
    install_path.mkdir(parents=True, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ install_dir
    original_dir = os.getcwd()
    os.chdir(install_path)

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_name = "lars-cloud.tar.gz"
        download_file(REPO_URL, archive_name)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        extract_archive(archive_name)

        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
        os.remove(archive_name)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {archive_name}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        run_build_script()

        print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LARS Cloud –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir(original_dir)


if __name__ == "__main__":
    main()